#07032022
Sulla parte slave faccio una suite di test specifica per la parte aciclica.
@tag_0703_00
Eseguo il test base e vedo a che punto siamo:
simple_test.exe \Device\NPF_{D8D267BF-D178-4544-B628-9DE58ABAE75A} -ACY > stACY@tag_0703_00.txt

Nota sullo slave:
Lo slave è configurato così:
const AD_AdiEntryType APPL_asAdiEntryList[] =
{
   { 10,   "ABP_UINT16_SET",        ABP_UINT16,   32, APPL_READ_MAP_WRITE_ACCESS_DESC, { { appl_aiUint16_10 ,NULL } }, NULL, SetAdi10Value },
   { 11,   "ABP_UINT16_GET",        ABP_UINT16,   32, APPL_WRITE_MAP_READ_ACCESS_DESC, { { appl_aiUint16_11 ,NULL } }, GetAdi11Value, NULL },
   { 12,   "ABP_UINT16_COUNTER",    ABP_UINT16,   1,  APPL_WRITE_MAP_READ_ACCESS_DESC,  { { &appl_Uint16_12 ,NULL  } }, GetAdi12Value, NULL         }, //  @tag_0703_00
//   { 12,   "ABP_UINT16_COUNTER",    ABP_UINT16,   1,  APPL_NOT_MAP_WRITE_ACCESS_DESC,  { { &appl_Uint16_12 ,NULL  } }, GetAdi12Value, NULL         }, //  @tag_0703_00
};

A run time la variabile impostata a ciclo di processo è sempre attiva in lettura, ovvero passo in continuazione dalla GetAdi11Value. 
Questo capita anche se sono in stato di WAIT_PROCESSING
Con certezza posso dire che il parametro solo aciclico è comunque letto durate lo stato di INIT. 
Quindi non serve essere in operazionale. 






#02032022
Il sw di esempio per l'aciclica sembra essere questo APPL_ADI_SETUP_SEPARATE_16. Perché richiede la attivazione delle callback
La schermata di avvio di questo esempio si presenta del tutto simile a quelle già viste per l'altro esempio:


Mapped PD size, RdPd 64 WrPd: 64
ANB_STATUS: ABP_ANB_STATE_NW_INIT
New process data sizes RdPd 64 WrPd 64
New process data sizes RdPd 64 WrPd 64
ANB_STATUS: ABP_ANB_STATE_WAIT_PROCESS

L'application entry list è fatta così

const AD_AdiEntryType APPL_asAdiEntryList[] =
{
   { 10,   "ABP_UINT16_SET",        ABP_UINT16,   32, APPL_READ_MAP_WRITE_ACCESS_DESC, { { appl_aiUint16_10 ,NULL } }, NULL, SetAdi10Value },
   { 11,   "ABP_UINT16_GET",        ABP_UINT16,   32, APPL_WRITE_MAP_READ_ACCESS_DESC, { { appl_aiUint16_11 ,NULL } }, GetAdi11Value, NULL },
   { 12,   "ABP_UINT16_COUNTER",    ABP_UINT16,   1,  APPL_NOT_MAP_WRITE_ACCESS_DESC,  { { &appl_Uint16_12 ,NULL  } }, NULL, NULL         },
};

Mentre la mappatura

const AD_MapType APPL_asAdObjDefaultMap[] =
{
   { 10,  PD_READ,   AD_MAP_ALL_ELEM, 0 },
   { 11,  PD_WRITE,  AD_MAP_ALL_ELEM, 0 },
   { AD_MAP_END_ENTRY }
};

Quelli che lo stack chiama "Process data" sono le variabili inserite nel processo ciclico
64 infatti sta ad incdcare 32 * sizeof(UINT16) = 64. Uno per la lettura e uno per la scrittura. 
Il contatore è fuori dal ciclico.

Ci lancio contro il simple test ciclico:
simple_test.exe \Device\NPF_{D8D267BF-D178-4544-B628-9DE58ABAE75A} -CYC > tag@0203_00.txt
C'è la mappatura e parte l'operazionale (comunicazione ciclica). La cosa regge. C'è un particolare che riguarda i diritti d'accesso. Il messaggio indica che non li gestisco, ma va bene
non è importante.
Voglio verificarlo con slaveinfo originale:
slaveinfo.exe \Device\NPF_{D8D267BF-D178-4544-B628-9DE58ABAE75A} -sdo > slaveInfoSdo@tag0203_00.txt ---> Ok vedo tutti gli oggetti
slaveinfo.exe \Device\NPF_{D8D267BF-D178-4544-B628-9DE58ABAE75A} -map > slaveInfoMap@tag0203_00.txt ---> Ok vedo solo gli oggetto per ciclico

Quindi è definitivo. Lo slaveinfo con l'opzione map vede solo i "Process Data" mentre -sdo vede tutti
Vado a correggere il simpletest modificato.
simple_test.exe \Device\NPF_{D8D267BF-D178-4544-B628-9DE58ABAE75A} -ACY > tag@0203_01.txt

OK. Vado avanti. 
Tiro su il codesys
Creo l'Esi file: HMS Industrial NetworksESI_Tecna_5_Acyc
Da codesys non so come cambiare il valore aciclico.







#01032022
Sto provando a vedere se con i risultati ricavati dalla mappatura riesco a usare i dati mappati per stimolare una comunicazione acicilica.
Ci sono ancora cosa non chiare su come azionare questo tipo di cominicazione.
Nel SOEM c'è l'esempio per linux. Prova a compilarlo sotto windows (tag@0103_00)


#28022022 @1
Eseguo la nuova seguente mappatura:
const AD_AdiEntryType APPL_asAdiEntryList[] =
{
   {  0x1,  "SPEED",     ABP_UINT16,   1, APPL_WRITE_MAP_READ_ACCESS_DESC, { { &appl_iSpeed,    &appl_sUint16Prop } } },
   {  0x2,  "REF_SPEED", ABP_UINT16,   1, APPL_READ_MAP_WRITE_ACCESS_DESC, { { &appl_iRefSpeed, &appl_sUint16Prop } } },
   {  0x3,  "WEL_CUR",     ABP_UINT16,   1, APPL_WRITE_MAP_READ_ACCESS_DESC, { { &appl_iWelCur,    &appl_sUint16Prop } } },
   {  0x4,  "REF_WEL_CUR", ABP_UINT16,   1, APPL_READ_MAP_WRITE_ACCESS_DESC, { { &appl_iRefWelCur, &appl_sUint16Prop } } },
   {  0x5,  "ABP_UINT16_WRITE",   ABP_UINT16,   TECNA_MAX_ARRAY_FOR_16_BIT, APPL_WRITE_MAP_READ_ACCESS_DESC, { { appl_aiUint16, &appl_sUint16Prop } } },  // @tag_1802_00
   {  0x6,  "ABP_UINT16_READ",    ABP_UINT16,   TECNA_MAX_ARRAY_FOR_16_BIT, APPL_READ_MAP_WRITE_ACCESS_DESC,  { { appl_aiUint16, &appl_sUint16Prop } } },  // @tag_1802_00
   {  0x7,  "ABP_UINT32_WRITE",   ABP_UINT32,   TECNA_MAX_ARRAY_FOR_32_BIT, APPL_WRITE_MAP_READ_ACCESS_DESC, { { appl_aiUint32, &appl_sUint32Prop } } },  // @tag_2502_00
   {  0x8,  "ABP_UINT32_READ",    ABP_UINT32,   TECNA_MAX_ARRAY_FOR_32_BIT, APPL_READ_MAP_WRITE_ACCESS_DESC,  { { appl_aiUint32, &appl_sUint32Prop } } },  // @tag_2502_00
   {  0x9,  "LAST_IN",     ABP_UINT16,   1, APPL_WRITE_MAP_READ_ACCESS_DESC, { { &appl_iLastIn,    &appl_sUint16Prop } } },
   {  0xa,  "LAST_OUT", ABP_UINT16,   1, APPL_READ_MAP_WRITE_ACCESS_DESC, { { &appl_iLastOut, &appl_sUint16Prop } } },
#ifdef TAG_2802_01
   {  0xb,  "ABP_UINT8_WRITE",   ABP_UINT8,   TECNA_MAX_ARRAY_FOR_8_BIT, APPL_WRITE_MAP_READ_ACCESS_DESC, { { appl_aiUint8, &appl_sUint8Prop } } },  // @tag_2502_00
   {  0xc,  "ABP_UINT8_READ",    ABP_UINT8,   TECNA_MAX_ARRAY_FOR_8_BIT, APPL_READ_MAP_WRITE_ACCESS_DESC,  { { appl_aiUint8, &appl_sUint8Prop } } },  // @tag_2802_00
#endif
};

Gli oggetti sono 29 e mi torna.
Poi tra gli oggetti:
9) Receive PDO mapping (254 + entries)
10) Receive PDO mapping (209 + entries)
11) Transmit PDO mapping (254 + entries)
12) Transmit PDO mapping (209 + entries)

Però sostanzialmente io ho:
a) 220 items a 32
b) 230 items a 16
c) 10 items a 8
d) 3 items a 16
Che fa 463 che è uguale alla somma di 254 + 209.
Quindi tutto ciò che è mappato in ciclico è mappato in aciclico?
Potrebbe essere questo il senso.

Come trovo la corrispondenza?
L'indirizzo del primo oggetto mappato  in lettura è 0x20020010
Potrebbe essere in effetti il valore di ref_speed
Se io riesco ad accedere in qualche modo a questo indirizzo e scriverci quando sono 
in IDLE ho ottenuto la scrittura aciclica.




#28022022 @0
Riprendo alcune definizioni:
ADO: Application Data Object: Oggetto che rappresenta i dati che si devono scambiare sul network.
Ogni istanza di questo oggetto ADI rappresenta un blocco di dati.
ADI sono normalmente associate ai parametri aciclici. 
Nel caso di ethercat ADI sono mappate nel PDO del CANOpen Object dictionary.

Dal file di log tag@2802_00.txt vedo che:
a) Lo slave ha 27 oggetti descritti su COE.
 1) Device Type
 2) Error Register
 3) Predefined error field
 4) Manuf Device name
 5) Manuf HW version
 6) Manuf SW version
 7) Restore def param
 8) Identity object
 9) Receive PDO mapping (254 + entries)
10) Receive PDO mapping (234 + entries)
11) Transmit PDO mapping (254 + entries)
12) Transmit PDO mapping (234 + entries)
13) Sync Manager comm type
14) Sync Manager Rx PDO assign
15) Sync Manager Tx PDO assign
16) Output Sync Manager param
17) Input Sync Manager param
18) SPEED (16 bit)
19) REF_SPEED
20) WEL_CUR (16 bit)
21) REF_WEl_CUR
22) ABP_UINT16_WRITE (230)
23) ABP_UINT16_READ (230)
24) ABP_UINT32_WRITE (255)
25) ABP_UINT32_READ (255)
26) LAST_IN (16 bit)
27) LAST_OUT

Quello che viene mappato tra gli oggetti da 18 a 27 è chiaro e rispecchia esattamente il mapping fatto nello slave
Il receive (transmit) PDO mapping 234 mi è chiaro: Sono gli oggetti a 16 bit mappati dallo slave.
Pare di capire che quelli a 32 bit abbiano raggiunto il loro limite. Sarebbe il numero massimo di istanze in un oggetto.
 


#27022022
Nel repo SOEM derivo dal Master 2 branches
a) Cyclic Branch che è il risultato finora conseguito (mappatura massima su slave)
ed intercetto e modifica di variabili da parte del master
b) Acyclic Branch che è il test sulla parte aciclica ancora da realizzare
Sul branch master, in corrispondenza di questa derivazione ho messo il tag CYC.




#26022022
C'è ancora qualcosa che non va nella mappa del SOEM
Ho richiesto l'output del LAST OUT e viene aggiornato l'elemento 5 dell'array di 32

OK il problema è questo. Quando da SOEM scrivo sull'output ci vuole il riferimento assoluto
Io sto dando il riferimento ADI ma dovrei dare un indirizzo assoluto per esempio 
LAST_OUT so già che è l'ultimo quindi 1486 bytes  -2 = 1484 (tag@26002_00)

tag@26002_01 e tag@26002_02:
Ora devo rendere sistematica la cosa nel SOEM
Fatto

Ci sono due aspetti ancora da chiarire:
Il primo è che vedo sul SOEM il numero a 16 bit che pare girato come indianismo
E' l'indianismo oppure ho sbagliato la conversione?
L'altro è che si dovrà tener conto anche delle entries di una ADI.
In tutti i casi che abbiamo visto ad ogni ADI corrisponde una entry.
Almeno per come vengono presi e mappati dal SOEM. 
Per ora la questione è sospesa.

Accertato che entrambi sono LITTLE ENDIAN. Quindi è un bug
Si sono io che non ho rispettato il LSB first
Ok risolto tag@26002_0x











#25022022
@tag_2502_00
Verifing system limit
Il numero massimo di elememti mappabili per l'accesso aciclico è:
Max. no. of
Elements Per ADI
(Acyclic access):  255 
Max. ADI Size (in bytes) (Acyclic access) 1524 
(tratto dalla pag 147 del Software design guide hms-hmsi-216-125)

Dati per ethercat.

Da pagina 12 della Software Guide:
Acyclic requests are translated in a uniform manner, and dedicated objects provide diagnostic
and alarm handling according to each network standard.

Nell'ultima prova siamo arrivati a 68 x 2 bytes con 6 entries ciclici.
A pag 11 del documento NetworkGuideEthercat hms-scm-102-034
Trovo scritto il seguente:
Up to 1486 bytes of fast cyclic I/O in each direction
Vado semplicente a trovare una mappatura che mi porti ai limiti suddetti.
aggiungo un array di 40 elementi di 32 bit
Totale OUPUT: 
	REF_SPEED + REF_WEL_CUR = 4 Bytes
	ABP_UINT16_READ = 32 * 2 = 64 Bytes
	ABP_UINT32_READ = 354 * 4 = 1416 Bytes
	LAST_OUTPUT	= 2 Bytes
Totale 1486

Test Run: simple_test@tag_2502_00.txt
Lanciando il test si vede che mappa 
ouptut Bytes is 582
input Bytes is 582 

La mappatura è però in linea con lo slave:
Mapped PD size, RdPd 582 WrPd: 582
New process data sizes RdPd 582 WrPd 582
New process data sizes RdPd 582 WrPd 582
Quindi perché lo slave mi ha tagliato? Che conti ha fatto?
Non ho aggiornato l'array
Non vedo però il LAST_OUT nel file di log. E' possibile ci sia un problema nel SOEM ancora?

Lancio un altro test
@tag_2502_01
Rebuild mapping

Dimensione Array =  256
Incontro questo errore:
Severity  : ABCC_SEV_WARNING
Error code: ABCC_EC_RESP_MSG_E_BIT_SET (ErrNo: 8)
Add info  : (UINT32)( (psMsg )->abData[ 0 ] ) (0xff)
File      : C:\lavoro\Clienti\HiFuture\Tecna\Progetti\Anybus\host-application-example-code-(for-compactcom-30-and-40-series)\Projects\Windows\abcc_drv\src\abcc_setup.c (Line:681)

Dimensione Array =  160 --> Mappa 710 Bytes è OK
Dimensione Array =  192 --> Mappa 838 Bytes è OK
Dimensione Array =  224 --> Mappa 966 Bytes è OK
Dimensione Array =  256 --> KO
Dimensione Array =  240 --> Mappa 1030 Bytes è OK
Dimensione Array =  249 --> Mappa 1066 Bytes è OK
Dimensione Array =  251 --> Mappa 1074 Bytes è OK
Dimensione Array =  255 --> Mappa 1090 Bytes è OK

Sostanzialmente 256 viene visto come -1 e fallisce
Si arriva quindi al limite di 255. 256 fallisce e numeri maggiori riparte da 0
511 sarà uguale a 255. Esatto

Metto l'array dei 16 bit a 230 ed ottengo esattamente 1486
Ne aggiungo 1 ed infatti fallisce.
Mantengo questa configurazione e vedo cosa ottengo sul master

simple_test@tag_2502_01.txt

Nel SOEM c'è una limitazione sull'array di ricera (logica utente e non logica SOEM)
La correggo. 
Uso 1524 Numero massimo di ADI per Ethercat

simple_test@tag_2502_02.txt

Corretti alcuni bug sul SOEM ora simple_test@tag_2502_04.txt
Tutto ciò che mappo su Slave lo vedo nel Master
Ora:
1) Aggiungo sul master la ricerca del LAST_OUT
2) Scrivo un valore da master
3) Print del valore impostato da master su slave

Ci deve essere un errore nel SOEM
Ora sullo slave ho:
Update 5 element of the UINT32 array with value: -587202560
Ma sul master avrei inviato il valore 221
Mettiamoci un valore a uint32 anche sul SOEM







#18022022
@tag_1802_00
Extending App

Pensiamo ad estendere l'applicazione ad altri tipi di dati:
Utilizzo un 32 element array of UINT16 (mapped to input data)
Per utilizzarlo in entrambe le direzioni devo mapparlo in input ed in output
Aggiungo quindi 2 entry nella AdiEntryList.
La nuova variabile quando aggiornata dall'esterno deve mantenere allineata una sua var
duale all'interno della applicazione.
Lo testiamo prima col SOEM e poi con il Codesys.

Col Soem è ok. Prima di attivare il codesys voglio verificare una cosa
CoE details: 2f FoE details: 01 EoE details: 00 SoE details: 00
Questo si legge dal file map prodotto dal SOEM.
Abbiamo visto che EoE ci da problemi
Cosa è FoE? ne abbiamo bisogno?
FoE è file over Ethercat. Potrebbe essere necessario per aggiornare il fw
Vale la pena approfondire.
File Access over EtherCAT (FoE)
If the device should support firmware download via EtherCAT, FoE should be supported. FoE is
based on TFTP. It provides fast file transfer and small protocol implementation.

Ma prima chiudo con la prova col codesys. OK

@tag_1802_01
SOEM vs SLAVE
Provo col SOEM a vedere di fare un applicativo che aggiorna e legge i dati dallo slave



#17022022
Se dovessimo usare:
#define ABP_ADI_INPUT_TECNA              ABP_APPD_DESCR_SET_ACCESS |  \
                                            ABP_APPD_DESCR_MAPPABLE_WRITE_PD 
Effettivamente la mappatura nel file sdo è solo di tipo write ma non mi cambia nulla per il simpleTest

Utilizzando AD_MAP_PAD_ADI piuttosto che AD_MAP_ALL_ELEM dovremmo forzare il numero di bit effettivamente da mappare
Vediamo se fa differenza e se c'è un bug qui
@tag_1702_00: 
Use of AD_MAP_PAD_ADI

Abbiamo verificato che l'uso di AD_MAP_PAD_ADI è corretta ma non porta benefici al simpleTest.

Verifico se queste impostazioni funzionano col Codesys
Creando il nuovo file XML tramite l'ESI generator ho in effetti molte discrepanze rispetto a quello fornito da
 HMS. Certo lo stack è cambiato molto e pare anche la versione dell'ESI generator
La mia è 1.8.0.0 mentre quella del XML fornito 1.7.1

Vado a provarlo
Dal test mi pare che questo XML mi produca un AL Status read from slave address 1001 status 16#24 : Invalid input mapping

Faccio quindi un passo indietro
@tag_1702_01: Restore simple example changing name and number of variables

Ora con il codesys riesco a leggere ma il debug non mi funziona.
E' possibile che sia qualcosa di mancante nello stack dovuto alle mie precedenti
modifiche. 
Faccio il commit di questa situazione e verifico la mail del supporto.

@tag_1702_02
Verifyng HMS support info
1) Enable SPEED_TEST
2) Switch on support for the EtherCAT host application object in abcc_adapt/abcc_obj_cfg.h:
#ifndef ECT_OBJ_ENABLE
   #define ECT_OBJ_ENABLE                          TRUE
3)Disable EoE like this:
/*
** Attribute 17: Enable EoE (BOOL - TRUE/FALSE)
*/
#ifndef ECT_IA_ENABLE_EOE_ENABLE
   #define ECT_IA_ENABLE_EOE_ENABLE                TRUE
   #define ECT_IA_ENABLE_EOE_VALUE                 FALSE
#endif
4) set all EtherCAT identification attributes to their default values by disabling them in abcc_adapt/abcc_identification.h
(Era già fatto. Quindi non è taggato)

La compilazione è ok ma ci sono errori nell'applicazione a run time
Forse manca questo setting che originariamente c'era e che era il sospettato
anche per il fallimento del debug codesys dell'altra prova:
APP_OBJ_ENABLE TRUE

Ripristino anche #define AD_IA_MIN_MAX_DEFAULT_ENABLE            ( FALSE )
che avevo abilitato per il BACNET

Riavvio il sistema completamente
Ora sul branch newdevel va bene.
Ci deve essere un problema quando lancio il Codesys. O si fa Codesys o si fa SOEM

A questo punto ritorno sul branch develNewApp
Sta andando.

@tag_1702_03
Verifying tecna app against simple test

@tag_1702_04
Voglio verificare 2 cose:
1) Vedere se effettivamente
APP_OBJ_ENABLE TRUE è determinante nel funzionamento del test
Mi sembra di no.
2) Vedere se riesco a creare un ESI compatibile col codesys

Una volta ricostruito l'ESI file e mappato sul codesys riesco a forzare le variabili e quindi l'applicazione possiamo dire che sta in piedi correttamente.





#16022022
@tag_1602_00:
Modifiche per leggere in automatico dallo speed example, la revisione di prodotto
@tag_1602_01:
Creazione nuova applicazione di test appl_adimap_tecna.c
@tag_1602_02:
The ADI access descriptor values cannot be changed:
Input ADIs: 09h (Get access + Write process data mapping possible).
Output ADIs: 11h (Get access + Read process data mapping possible)
Dal manuale estraggo quanto sopra. 
@tag_1602_03:
Mi sembra che manchi il set nella parte di input. Lo inserisco
Però non mi tornano i conti. Vedo nel mapping accessi non congruenti
Invertendo INPUT con OUTPUT in rif a speed a refspeed ora ottengo risultati
congruenti in:
0x2001      "SPEED"                                       [VAR]
    0x00      "SPEED"                                       [UNSIGNED16       R_R_R_]      0x0000 / 0
0x2002      "REF_SPEED"                                   [VAR]
    0x00      "REF_SPEED"                                   [UNSIGNED16       RWRWRW]      0x0000 / 0

Quindi SPEED è R_R_R_ e REF_SPEED RWRWRW come dovrebbe essere.
Resta il fatto che al primo giro (all'accensione della board) ho sempre un errore nella mappatura

0x2001      "SPEED"                                       [VAR]
    0x00      "SPEED"                                       [UNSIGNED16       R_R_R_]      0x0000 / 0
0x2002      "REF_SPEED"                                   [VAR]
- Time:1645017072.835 PACKET slave:1 index:2002.00 error:1

Questo è il mapping dell' esempio base
const AD_AdiEntryType APPL_asAdiEntryList[] =
 {
    {  0x1,  "SPEED",     ABP_UINT16,   1, APPL_WRITE_MAP_READ_ACCESS_DESC, { { &appl_iSpeed,    &appl_sUint16Prop } } },
    {  0x2,  "REF_SPEED", ABP_UINT16,   1, APPL_READ_MAP_WRITE_ACCESS_DESC, { { &appl_iRefSpeed, &appl_sUint16Prop } } }
 };

APPL_WRITE_MAP_READ_ACCESS_DESC ( ABP_APPD_DESCR_GET_ACCESS | ABP_APPD_DESCR_MAPPABLE_WRITE_PD ) 					---> Speed
APPL_READ_MAP_WRITE_ACCESS_DESC ( ABP_APPD_DESCR_GET_ACCESS | ABP_APPD_DESCR_SET_ACCESS |  ABP_APPD_DESCR_MAPPABLE_READ_PD )		---> RefSpeed

ABP_ADI_OUTPUT_TECNA             ABP_APPD_DESCR_GET_ACCESS | ABP_APPD_DESCR_MAPPABLE_READ_PD  						---> Speed
ABP_ADI_INPUT_TECNA              ABP_APPD_DESCR_GET_ACCESS | ABP_APPD_DESCR_SET_ACCESS | ABP_APPD_DESCR_MAPPABLE_WRITE_PD 		---> RefSpeed

Per tutti vale (tecna e simpleExample)
const AD_MapType APPL_asAdObjDefaultMap[] =
{
   { 1, PD_WRITE, AD_MAP_ALL_ELEM, 0 },
   { 2, PD_READ,  AD_MAP_ALL_ELEM, 0 },
   { AD_MAP_END_ENTRY }
};


Nel tecna.c

onst AD_AdiEntryType APPL_asAdiEntryList[] =
{
   {  0x1,  "SPEED",     ABP_UINT16,   1, ABP_ADI_OUTPUT_TECNA, { { &appl_iSpeed,    &appl_sUint16Prop } } },
   {  0x2,  "REF_SPEED", ABP_UINT16,   1, ABP_ADI_INPUT_TECNA, { { &appl_iRefSpeed, &appl_sUint16Prop } } }
};


const AD_AdiEntryType APPL_asAdiEntryList[] =
{

   {  0x1,  "SPEED",     ABP_UINT16,   1, APPL_WRITE_MAP_READ_ACCESS_DESC, { { &appl_iSpeed,    &appl_sUint16Prop } } },
   {  0x2,  "REF_SPEED", ABP_UINT16,   1, APPL_READ_MAP_WRITE_ACCESS_DESC, { { &appl_iRefSpeed, &appl_sUint16Prop } } }
};
/*------------------------------------------------------------------------------
** Map all adi:s in both directions
**------------------------------------------------------------------------------
** 1. AD instance | 2. Direction | 3. Num elements | 4. Start index |
**------------------------------------------------------------------------------
*/
const AD_MapType APPL_asAdObjDefaultMap[] =
{
   { 1, PD_WRITE, AD_MAP_ALL_ELEM, 0 },
   { 2, PD_READ,  AD_MAP_ALL_ELEM, 0 },
   { AD_MAP_END_ENTRY }
};




