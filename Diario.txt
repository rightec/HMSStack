#25022022
@tag_2502_00
Verifing system limit
Il numero massimo di elememti mappabili per l'accesso aciclico è:
Max. no. of
Elements Per ADI
(Acyclic access):  255 
Max. ADI Size (in bytes) (Acyclic access) 1524 
(tratto dalla pag 147 del Software design guide hms-hmsi-216-125)

Dati per ethercat.

Da pagina 12 della Software Guide:
Acyclic requests are translated in a uniform manner, and dedicated objects provide diagnostic
and alarm handling according to each network standard.

Nell'ultima prova siamo arrivati a 68 x 2 bytes con 6 entries ciclici.
A pag 11 del documento NetworkGuideEthercat hms-scm-102-034
Trovo scritto il seguente:
Up to 1486 bytes of fast cyclic I/O in each direction
Vado semplicente a trovare una mappatura che mi porti ai limiti suddetti.
aggiungo un array di 40 elementi di 32 bit
Totale OUPUT: 
	REF_SPEED + REF_WEL_CUR = 4 Bytes
	ABP_UINT16_READ = 32 * 2 = 64 Bytes
	ABP_UINT32_READ = 354 * 4 = 1416 Bytes
	LAST_OUTPUT	= 2 Bytes
Totale 1486

Test Run: simple_test@tag_2502_00.txt
Lanciando il test si vede che mappa 
ouptut Bytes is 582
input Bytes is 582 

La mappatura è però in linea con lo slave:
Mapped PD size, RdPd 582 WrPd: 582
New process data sizes RdPd 582 WrPd 582
New process data sizes RdPd 582 WrPd 582
Quindi perché lo slave mi ha tagliato? Che conti ha fatto?
Non ho aggiornato l'array
Non vedo però il LAST_OUT nel file di log. E' possibile ci sia un problema nel SOEM ancora?

Lancio un altro test
@tag_2502_01
Rebuild mapping

Dimensione Array =  256
Incontro questo errore:
Severity  : ABCC_SEV_WARNING
Error code: ABCC_EC_RESP_MSG_E_BIT_SET (ErrNo: 8)
Add info  : (UINT32)( (psMsg )->abData[ 0 ] ) (0xff)
File      : C:\lavoro\Clienti\HiFuture\Tecna\Progetti\Anybus\host-application-example-code-(for-compactcom-30-and-40-series)\Projects\Windows\abcc_drv\src\abcc_setup.c (Line:681)

Dimensione Array =  160 --> Mappa 710 Bytes è OK
Dimensione Array =  192 --> Mappa 838 Bytes è OK
Dimensione Array =  224 --> Mappa 966 Bytes è OK
Dimensione Array =  256 --> KO
Dimensione Array =  240 --> Mappa 1030 Bytes è OK
Dimensione Array =  249 --> Mappa 1066 Bytes è OK
Dimensione Array =  251 --> Mappa 1074 Bytes è OK
Dimensione Array =  255 --> Mappa 1090 Bytes è OK

Sostanzialmente 256 viene visto come -1 e fallisce
Si arriva quindi al limite di 255. 256 fallisce e numeri maggiori riparte da 0
511 sarà uguale a 255. Esatto

Metto l'array dei 16 bit a 230 ed ottengo esattamente 1486
Ne aggiungo 1 ed infatti fallisce.
Mantengo questa configurazione e vedo cosa ottengo sul master

simple_test@tag_2502_01.txt

Nel SOEM c'è una limitazione sull'array di ricera (logica utente e non logica SOEM)
La correggo. 
Uso 1524 Numero massimo di ADI per Ethercat

simple_test@tag_2502_02.txt

Corretti alcuni bug sul SOEM ora simple_test@tag_2502_04.txt
Tutto ciò che mappo su Slave lo vedo nel Master
Ora:
1) Aggiungo sul master la ricerca del LAST_OUT
2) Scrivo un valore da master
3) Print del valore impostato da master su slave

Ci deve essere un errore nel SOEM
Ora sullo slave ho:
Update 5 element of the UINT32 array with value: -587202560
Ma sul master avrei inviato il valore 221
Mettiamoci un valore a uint32 anche sul SOEM







#18022022
@tag_1802_00
Extending App

Pensiamo ad estendere l'applicazione ad altri tipi di dati:
Utilizzo un 32 element array of UINT16 (mapped to input data)
Per utilizzarlo in entrambe le direzioni devo mapparlo in input ed in output
Aggiungo quindi 2 entry nella AdiEntryList.
La nuova variabile quando aggiornata dall'esterno deve mantenere allineata una sua var
duale all'interno della applicazione.
Lo testiamo prima col SOEM e poi con il Codesys.

Col Soem è ok. Prima di attivare il codesys voglio verificare una cosa
CoE details: 2f FoE details: 01 EoE details: 00 SoE details: 00
Questo si legge dal file map prodotto dal SOEM.
Abbiamo visto che EoE ci da problemi
Cosa è FoE? ne abbiamo bisogno?
FoE è file over Ethercat. Potrebbe essere necessario per aggiornare il fw
Vale la pena approfondire.
File Access over EtherCAT (FoE)
If the device should support firmware download via EtherCAT, FoE should be supported. FoE is
based on TFTP. It provides fast file transfer and small protocol implementation.

Ma prima chiudo con la prova col codesys. OK

@tag_1802_01
SOEM vs SLAVE
Provo col SOEM a vedere di fare un applicativo che aggiorna e legge i dati dallo slave



#17022022
Se dovessimo usare:
#define ABP_ADI_INPUT_TECNA              ABP_APPD_DESCR_SET_ACCESS |  \
                                            ABP_APPD_DESCR_MAPPABLE_WRITE_PD 
Effettivamente la mappatura nel file sdo è solo di tipo write ma non mi cambia nulla per il simpleTest

Utilizzando AD_MAP_PAD_ADI piuttosto che AD_MAP_ALL_ELEM dovremmo forzare il numero di bit effettivamente da mappare
Vediamo se fa differenza e se c'è un bug qui
@tag_1702_00: 
Use of AD_MAP_PAD_ADI

Abbiamo verificato che l'uso di AD_MAP_PAD_ADI è corretta ma non porta benefici al simpleTest.

Verifico se queste impostazioni funzionano col Codesys
Creando il nuovo file XML tramite l'ESI generator ho in effetti molte discrepanze rispetto a quello fornito da
 HMS. Certo lo stack è cambiato molto e pare anche la versione dell'ESI generator
La mia è 1.8.0.0 mentre quella del XML fornito 1.7.1

Vado a provarlo
Dal test mi pare che questo XML mi produca un AL Status read from slave address 1001 status 16#24 : Invalid input mapping

Faccio quindi un passo indietro
@tag_1702_01: Restore simple example changing name and number of variables

Ora con il codesys riesco a leggere ma il debug non mi funziona.
E' possibile che sia qualcosa di mancante nello stack dovuto alle mie precedenti
modifiche. 
Faccio il commit di questa situazione e verifico la mail del supporto.

@tag_1702_02
Verifyng HMS support info
1) Enable SPEED_TEST
2) Switch on support for the EtherCAT host application object in abcc_adapt/abcc_obj_cfg.h:
#ifndef ECT_OBJ_ENABLE
   #define ECT_OBJ_ENABLE                          TRUE
3)Disable EoE like this:
/*
** Attribute 17: Enable EoE (BOOL - TRUE/FALSE)
*/
#ifndef ECT_IA_ENABLE_EOE_ENABLE
   #define ECT_IA_ENABLE_EOE_ENABLE                TRUE
   #define ECT_IA_ENABLE_EOE_VALUE                 FALSE
#endif
4) set all EtherCAT identification attributes to their default values by disabling them in abcc_adapt/abcc_identification.h
(Era già fatto. Quindi non è taggato)

La compilazione è ok ma ci sono errori nell'applicazione a run time
Forse manca questo setting che originariamente c'era e che era il sospettato
anche per il fallimento del debug codesys dell'altra prova:
APP_OBJ_ENABLE TRUE

Ripristino anche #define AD_IA_MIN_MAX_DEFAULT_ENABLE            ( FALSE )
che avevo abilitato per il BACNET

Riavvio il sistema completamente
Ora sul branch newdevel va bene.
Ci deve essere un problema quando lancio il Codesys. O si fa Codesys o si fa SOEM

A questo punto ritorno sul branch develNewApp
Sta andando.

@tag_1702_03
Verifying tecna app against simple test

@tag_1702_04
Voglio verificare 2 cose:
1) Vedere se effettivamente
APP_OBJ_ENABLE TRUE è determinante nel funzionamento del test
Mi sembra di no.
2) Vedere se riesco a creare un ESI compatibile col codesys

Una volta ricostruito l'ESI file e mappato sul codesys riesco a forzare le variabili e quindi l'applicazione possiamo dire che sta in piedi correttamente.





#16022022
@tag_1602_00:
Modifiche per leggere in automatico dallo speed example, la revisione di prodotto
@tag_1602_01:
Creazione nuova applicazione di test appl_adimap_tecna.c
@tag_1602_02:
The ADI access descriptor values cannot be changed:
Input ADIs: 09h (Get access + Write process data mapping possible).
Output ADIs: 11h (Get access + Read process data mapping possible)
Dal manuale estraggo quanto sopra. 
@tag_1602_03:
Mi sembra che manchi il set nella parte di input. Lo inserisco
Però non mi tornano i conti. Vedo nel mapping accessi non congruenti
Invertendo INPUT con OUTPUT in rif a speed a refspeed ora ottengo risultati
congruenti in:
0x2001      "SPEED"                                       [VAR]
    0x00      "SPEED"                                       [UNSIGNED16       R_R_R_]      0x0000 / 0
0x2002      "REF_SPEED"                                   [VAR]
    0x00      "REF_SPEED"                                   [UNSIGNED16       RWRWRW]      0x0000 / 0

Quindi SPEED è R_R_R_ e REF_SPEED RWRWRW come dovrebbe essere.
Resta il fatto che al primo giro (all'accensione della board) ho sempre un errore nella mappatura

0x2001      "SPEED"                                       [VAR]
    0x00      "SPEED"                                       [UNSIGNED16       R_R_R_]      0x0000 / 0
0x2002      "REF_SPEED"                                   [VAR]
- Time:1645017072.835 PACKET slave:1 index:2002.00 error:1

Questo è il mapping dell' esempio base
const AD_AdiEntryType APPL_asAdiEntryList[] =
 {
    {  0x1,  "SPEED",     ABP_UINT16,   1, APPL_WRITE_MAP_READ_ACCESS_DESC, { { &appl_iSpeed,    &appl_sUint16Prop } } },
    {  0x2,  "REF_SPEED", ABP_UINT16,   1, APPL_READ_MAP_WRITE_ACCESS_DESC, { { &appl_iRefSpeed, &appl_sUint16Prop } } }
 };

APPL_WRITE_MAP_READ_ACCESS_DESC ( ABP_APPD_DESCR_GET_ACCESS | ABP_APPD_DESCR_MAPPABLE_WRITE_PD ) 					---> Speed
APPL_READ_MAP_WRITE_ACCESS_DESC ( ABP_APPD_DESCR_GET_ACCESS | ABP_APPD_DESCR_SET_ACCESS |  ABP_APPD_DESCR_MAPPABLE_READ_PD )		---> RefSpeed

ABP_ADI_OUTPUT_TECNA             ABP_APPD_DESCR_GET_ACCESS | ABP_APPD_DESCR_MAPPABLE_READ_PD  						---> Speed
ABP_ADI_INPUT_TECNA              ABP_APPD_DESCR_GET_ACCESS | ABP_APPD_DESCR_SET_ACCESS | ABP_APPD_DESCR_MAPPABLE_WRITE_PD 		---> RefSpeed

Per tutti vale (tecna e simpleExample)
const AD_MapType APPL_asAdObjDefaultMap[] =
{
   { 1, PD_WRITE, AD_MAP_ALL_ELEM, 0 },
   { 2, PD_READ,  AD_MAP_ALL_ELEM, 0 },
   { AD_MAP_END_ENTRY }
};


Nel tecna.c

onst AD_AdiEntryType APPL_asAdiEntryList[] =
{
   {  0x1,  "SPEED",     ABP_UINT16,   1, ABP_ADI_OUTPUT_TECNA, { { &appl_iSpeed,    &appl_sUint16Prop } } },
   {  0x2,  "REF_SPEED", ABP_UINT16,   1, ABP_ADI_INPUT_TECNA, { { &appl_iRefSpeed, &appl_sUint16Prop } } }
};


const AD_AdiEntryType APPL_asAdiEntryList[] =
{

   {  0x1,  "SPEED",     ABP_UINT16,   1, APPL_WRITE_MAP_READ_ACCESS_DESC, { { &appl_iSpeed,    &appl_sUint16Prop } } },
   {  0x2,  "REF_SPEED", ABP_UINT16,   1, APPL_READ_MAP_WRITE_ACCESS_DESC, { { &appl_iRefSpeed, &appl_sUint16Prop } } }
};
/*------------------------------------------------------------------------------
** Map all adi:s in both directions
**------------------------------------------------------------------------------
** 1. AD instance | 2. Direction | 3. Num elements | 4. Start index |
**------------------------------------------------------------------------------
*/
const AD_MapType APPL_asAdObjDefaultMap[] =
{
   { 1, PD_WRITE, AD_MAP_ALL_ELEM, 0 },
   { 2, PD_READ,  AD_MAP_ALL_ELEM, 0 },
   { AD_MAP_END_ENTRY }
};




